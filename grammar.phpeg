//generate a parser with:
// >pegjs --plugin phpegjs --output parser.php grammar.phpeg

Expression
 = out:(Help / Count / Nextevent / PVPSeason) throwaway:$.* {
  return $out;
 }

Help
= "!help"i _ arg:HelpArg? {
  return ["h"=> ["arg" => $arg]];
}

HelpArg
 = "count"i
 / "nextevent"i

 _ "whitespace"
  = [ \t\n\r]*
  
Count
 = slice:Slice _ ("@" _ )? cnt:PVECountSpec _ lag:ReportLag? {
   return ["c" => [
     "slice" => $slice
     ,"count" => $cnt
     ,"lag" => $lag
   ]];
 }
 / slice:Slice _ t:LagOnlyUpdateType _ lag:ReportLag {
   return ["c" => [
     "slice" => $slice
     ,"count" => $t
     ,"lag" => $lag
   ]];
 }

LagOnlyUpdateType
 = "last"i _ flip:"flip"i? {
 	return $flip == 'flip'?"flip-update":"lag-update";
 }


Slice
 = $([12345] "." [7689])
 
PVECountSpec
= dg:Digits & { return $dg > 0 && $dg < 1000; } {
   return $dg;
 } 
/ ("flipped"i / "flip"i) {
  return "flip";
}

PVPCountSpec
 = dg:Digits & { return $dg > 0 && $dg < 5000; } {
   return $dg;
 } 
/ ("flipped"i / "flip"i) {
  return "flip";
}

Digits
 = [0-9]+ {
   $raw = (int) filter_var($this->text(), FILTER_SANITIZE_NUMBER_INT);
   if ($raw > 0 && $raw < 5000)
   {
     return $raw;
   }
   return NULL;
 }

 Minutes
  = _? ("mins"i / "min"i / "m"i) (_ "ago"i)? {
    return "m";
  }
Hours
 = _? "h"i{
    return "h";
 }
 
ReportLag 
 = (Digits "h" Digits Minutes
 / Digits "h" Digits
 / Digits Minutes
 / Digits "h" )

Nextevent
= "next event"i _ eventnum:Digits {return ["n"=> ["nextevent" => $eventnum]];}

 PVPSlice
  = "pvp"i _ slicepart:("cl"i [6789]) {return $slicepart[0] . $slicepart[1];}

PVPSeason
 = slice:PVPSlice _ ("@" _ )? cnt:PVPCountSpec _ lag:ReportLag? {
   return ["pvp" => [
     "slice" => $slice
     ,"count" => $cnt
     ,"lag" => $lag
   ]];
 }
 /  slice:PVPSlice _ t:LagOnlyUpdateType _ lag:ReportLag {
   return ["pvp" => [
     "slice" => $slice
     ,"count" => $t
     ,"lag" => $lag
   ]];
 }


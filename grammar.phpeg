//generate a parser with:
// >pegjs --plugin phpegjs --output parser.php grammar.phpeg

Expression
 = Help
 / Count
 / Nextevent
 / PVPSeason

Help
= "!help"i _ arg:HelpArg? {
  return ["h"=> ["arg" => $arg]];
}

HelpArg
 = "count"i
 / "nextevent"i

 _ "whitespace"
  = [ \t\n\r]*
  
Count
 = slice:Slice _ ("@" _ )? cnt:PVECountSpec _ lag:ReportLag? {
   return ["c" => [
     "slice" => $slice
     ,"count" => $cnt
     ,"lag" => $lag
   ]];
 }
 / slice:Slice _ t:LagOnlyUpdateType _ lag:ReportLag {
   return ["c" => [
     "slice" => $slice
     ,"count" => $t
     ,"lag" => $lag
   ]];
 }

LagOnlyUpdateType
 = "last"i _ flip:"flip"i? {
 	return $flip == 'flip'?"flip-update":"lag-update";
 }


Slice
 = [12345] "." [7689] {return $this->text();}
 
PVECountSpec
 = dg:Digits {
   if ($dg < 1 || $dg > 999) {
     return "flip";
   }
   return $dg;
 } 
 / "flip" {
   return $this->text();
 }
 
PVPCountSpec
 = dg:Digits {
   if ($dg < 1 || $dg > 9999) {
     return "flip";
   }
   return $dg;
 } 
 / "flip" {
   return $this->text();
 }

Digits
 = [0-9]+ {
   $raw = (int) filter_var($this->text(), FILTER_SANITIZE_NUMBER_INT);
   if ($raw > 0 && $raw < 5000)
   {
     return $raw;
   }
   return NULL;
 }
 
ReportLag 
 = (Digits "h" Digits "m"
 / Digits "h" Digits
 / Digits "m"
 / Digits "h" ){
  return $this->text();
 }

Nextevent
= "next event"i _ eventnum:Digits {return ["n"=> ["nextevent" => $eventnum]];}

 PVPSlice
  = "pvp"i _ slicepart:("cl"i [6789]) {return $slicepart;}

PVPSeason
 = slice:PVPSlice _ ("@" _ )? cnt:PVPCountSpec _ lag:ReportLag? {
   return ["pvp" => [
     "slice" => $slice
     ,"count" => $cnt
     ,"lag" => $lag
   ]];
 }
 /  slice:PVPSlice _ t:LagOnlyUpdateType _ lag:ReportLag {
   return ["pvp" => [
     "slice" => $slice
     ,"count" => $t
     ,"lag" => $lag
   ]];
 }

